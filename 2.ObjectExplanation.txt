[1. new 란 무엇인가,  Date 는 왜 저렇게 쓰이는가, this는 무엇인가]

console.log(new Date().toISOString())

 -  1. Date()
        이름 : [생성자함수] 혹은 [생성자클래스]
        특징 : 파란색이다. 객체이다. [여러 객체들이 내장되어있다.]
        사용 : [이미 정의되어있는 객체(함수)로, 그냥 뽑아서 사용하면된다.]

-   2. new
        사용 : [새로운 object]를 [호출할때 사용]!!!
        
-   3. this
        사용 : 1. [빈 객체를 암시적으로 만들어냄]
               2. [클래스를 기반으로 한 객체를 대변함]    
                    ex) job 이라는 함수이자 객체 를 this 로 받아, this.title 등을 `템플릿 리터럴`에 사용가능 [2-2. 생성자함수만들기 - 함수추가] 에서 다룸
        
        ex) const ms = {}
            ms.age = 30
            ms.id = "msms"
            ==>> ms = { age:30 , id : "msms"} 가 되는것처럼

            this.name =;
            this.id = ;
            하면 [만들어진 객체에 키:값 쌍이 들어가는 형태이다.]

[2-1. 생성자함수 만들기 - 객체를 만드는  constructor]
    생성자함수란 : [함수는 함수인데, 객체를 만드는 함수이다.]

    만드는 이유 : [객체를 편하게 생성하기 위함이다]
    예시 : [사용자의 주소, 연봉, 직장 등을 포함한 객체를 여러개 생성하려면]

        const job1 = {
            job: ...
            salry : ...
        }
        const job2 = {
            job: ... 
            salary : ...
        }
        
        무한정 적어내야한다.
    =   [객체를 만드는 [생성자함수] 만든다면 , 편하게 [객체를 생성할 수 있다.]]

    사용 : class Job {
                constructor(Jobtitle,place,salary){
                    this.title = Jobtitle,
                    this.location = place
                    this.salary = salary
                }   
            }
            const job1 = new Job("hey","incheon",5000)
            console.log(job1)
        
    설명 :  1. 이름은 첫글자 대문자로
            2. constructor(){} 를 통해 자신만의 [객체]를 만듬
            3. 사용은 new Job()
            4. this : [클래스를 기반으로] [생성될 객체를 참조]한다.

    헷갈리는점 : 1. constructor(){} 는 안에, 객체를 넣을것이지만, = 기호를 사용한다.
                2. constructor(){} 안에는, 전체 객체를 받는 [this] 를 꼭 사용한다.
                

[2-2. 생성자함수 만들기 - 함수 추가]
-           : 생성자함수에 [함수를 추가해보자]

    생성:   class Job {
                constructor(Jobtitle,place,salary){
                    this.title = Jobtitle,
                    this.location = place
                    this.salary = salary
                }
                decribe(){
                    console.log(` ${this.title} ${this.location} ${this.salary}`)
                }
            }
    사용:
            const developer = new Job("developer", "NewYork",5000)
            const cook = new Job("cook","incheon",35000)

            developer.decribe();
            cook.decribe();

-   장점: [블루프린트(Job)] 하나에 [객체와 함수를 전부 담아], [그 객체를 포함하는 함수를 자유롭게 사용가능]


[3. 배열 비구조화]

    const hobbies = ["soccer", "baseball","football"]
    const [man, maan, maaan] = hobbies
    console.log(man)
    console.log(maan)
    console.log(maaan)

- 배열을 쪼개서, 각각의 변수에 각 값을 넣음

[4. 객체 비구조화]
    const hobbiess = {a : "soccer", b: "baseball", c: "football"}
    const {a} = hobbiess

    [객체 비구조화는, 변수 이름이, 객체의 속성중 키 값을 그대로 따라오게 되어있는데]
    [만약 변수이름을 수동으로 바꾸고 싶다면]

    const {b :myjob, c:mysecond}  = hobbiess
    console.log(myjob)
    console.log(mysecond)
    - hobbiess 중, [b에 해당하는 값을 꺼내],[myjob이라는 변수에 저장하겠다] 라는 뜻이된다. 