// alert("hi, my name is MyungSik I'm myunsik \"이게 바로\"") ;
// let greetingName= "hi, my name is MyungSik"; // let = 변수를 생성시키는 명령어
// let age = "32"
// alert(greetingName);
// greetingName ="hi, i\'m Real MyungSik";
// alert(greetingName);
// alert(32);
// alert(age);



// greetingName 이라는 변수를 만들고, 밸류를 저장한 후, alert시키고, 
// 만들어진 변수에 밸류를 바꿔, 다시 적용시키면 [위에서 아래로 적용되는 코드 특성상 바뀌어서 출력된다.]

// array variation
let hobbies = ["sports", "Cooking", "Swimming"];
alert(hobbies)
alert(hobbies[0])

let job = {title : "Developer", place : "Newyork" , salary : 50000 };
alert(job.title)
alert(job.place)


// 어른이 되고나서 지난 시간을 입력해보자. [ 계산 쌉가능 ]=========================================================================


// [1단계. 기본적인 사용]

/*
let age = 32;
let adult = 18;
let adultYears = age-adult;
alert(adultYears);

age = 40;
adultYears = age-adult;
alert(adultYears);


*/

// 드럽게 이상하네;;; age를 바꿔주면 바로 adultYears가 바껴야 하는데
//                   age를 바꿔주고, adultYears를 다시한번 정의해 줘야 값이 바뀐다. 그냥 외우자. 정의하지 않으면 바로바로 바뀌지 않는다.

// SO!, 우리는 Function 을 이용할 것이다!! = 반복되는 코드를 줄이기 위하여

/* 

==================================================================================================================================================
// [2단계. 함수의 사용 ]

let adultYears;
let age;
let adult = 18;

function calculateAdultYears() {
    adultYears =  age - adult
}

age=42;
calculateAdultYears();
alert(adultYears)

age=52;
calculateAdultYears();
alert(adultYears)

*/


// *변수로 이루어진 함수를 만들기 이전에!! 변수를 반드시 생성!! 하도록 하자;
// *함수를 호출하고 계산하면 그 값은 저장된다. 이후에 그 안에있는 변수의 값을 변경하더라도, 다시 함수를 호출하여 저장하지 않으면 값을 바뀌지 않는다.
// ** 만약!! [함수 안에서 변수를 생성 하였다면] [그 변수는 오직 그 함수 안에서만 사용가능하다]
/*

function calculateAdultYears() {
    let adultYears =  age - adult
}

이라고 적었다면 adultYears 라는 변수는 오로지, 그 함수 안에서만 사용되기에, 밖으로 나올 수 없다.
즉, alert(adultYears) 라 한들, 함수 안에서만 사용되고 나올 수 없는 그 변수는 alert 될 수 없다.
*/


//==================================================================================================================================================


// ***** 매우매우 중요한 [함수의 리턴값] 에 대한 설명
/*
    함수가 변수의 이름을 포함한, 즉, 도출한 값이 '특정한 변수'일 경우 ex)adultYears =  age - adult
    '특정한 변수'가 변경될 경우, 모든 코드에 대하여 그 변수의 이름을 수정해주어야 한다.
    복잡하고 많은 양의 코드일 수록 그 행동은 불가능에 가까우며, 번거롭고, 오류가 발생하기 쉽다.

    또한!! 
    return 값을 사용치 않고 '특정 변수'에 대하여 '특정 함수'를 사용할 경우에는
    함수 안에 포함되어있는 '특정한 변수' 이외에 대하여 '그 함수' 를 사용 할 경우
    [함수 자체가 값을 가지는 것이 아닌], [함수 안의 '특정 변수']가 값을 가지고 있는 것이기 때문에
    ['다른 변수' 에 대해서 '그 함수'는 사용 불가능한 지경에 이른다.]

    ==>> 우리는 이것을 해결하기 위해 '특정한 변수'로 함수를 지정하는 것이 아닌
        [함수 그 자체가 값의 반환값을 가지도록] [return] 을 사용하여 함수를 만들것이다.

    ==>> 변경 전 : adultYears =  age - adult  
         변경 후 : return age - adult


*/


//==================================================================================================================================================

// [3단계. 리턴을 포함한 함수의 사용]
// : 함수 그 자체가 값을 가지게 만들어 유연한 함수의 사용이 가능하게 만듦
// : 또한, 값을 변경하기 유용하며, 함수 자체가 값을 가지기에 달라지는 여러 변수에도 편하게 사용 가능

// : 단, [함수 안에, 직접 저장되는 변수의 값을 입력한 것이 아니라서]
//      [변수의 밸류를 [함수 계산 그 자체]로 저장하는 방법을 추가해야한다.]

/*

let age;
let adult = 18;
let adultYears;

function calculateAdultYears() {  // : 단, [함수 안에, 직접 저장되는 변수의 값을 입력한 것이 아니라서]
    return age - adult
}

age=20;
adultYears = calculateAdultYears();   // [변수의 밸류를 [함수 계산 그 자체]로 저장하는 방법을 추가해야한다.]
alert(adultYears);

age=32;
adultYears = calculateAdultYears();   // [변수의 밸류를 [함수 계산 그 자체]로 저장하는 방법을 추가해야한다.]
alert(adultYears);

*/

//==================================================================================================================================================
// 
// [4단계. 매개변수] ** 최종단계, 궁극의 function 사용법

// : 함수를 사용할때 외부변수(현재 상황에서는 age, adult 등...)는 되도록 지양하는 것이 좋다.***
// : 우리는 외부변수를 지양하는 상황을 해결하기 위해, 함수 내부에서만 사용하는 [parameter(매개변수)] 라는 것을 사용할 것이다.  ==> 함수의 (소괄호) 부분을 의미한다.

// : parameter(매개변수)는 [함수 내에서만 사용 가능한 Input(집어넣는 값) 요소이다].
// : parameter는 개발자가 원하는 이름으로 변수이름처럼 지어 사용 가능하며, 함수 내부에 사용될 값을 명시하는 역하라을 한다.
// : parameter는 함수 밖으로 꺼내서 사용할 수 없다.

/* ex) ------------------------------------------------------------------------------
    function(userAge) {
        age - 18;
    }
    alert(userAge) ==> 사용 불가, parameter는 함수 내에서만 사용가능한 input값이다.
    ------------------------------------------------------------------------------

    ex2) ------------------------------------------------------------------------------
    function(userAge) {
        userAge - 18;
    }
    ==> 외부변수 age 대신, 내부 parameter인 userAge 사용하였다.
    ------------------------------------------------------------------------------
*/

// : 우리는 [parameter]를 [함수 내부] 에서 지정하고, 
// : [함수를 사용할 때, 그 때, 값을 지정해주도록 한다]
// : 이 parameter 는 alert() 를 사용할때와 같이 (소괄호) 안에 사용 되는 값이 바로 parameter 이다.


function calculateAdultYears( userAge, adultAge ) { // 외부변수 대신에 함수 내부에서만 사용가능한 parameter 를 (소괄호) 안에 따로 정의하고, [연산부분]에 사용하도록 한다.
    return userAge-adultAge
}

let age;
let adult = 18;
let adultYears;

age = 42;
adultYears = calculateAdultYears(age, adult) // 대신 우리는 함수를 사용할 때, [parameter] 값을 할당해준다.
alert(adultYears)

adultYears = calculateAdultYears(53, adult)  // 이런식으로 [parameter 값을 직접 할당]하는 것도 [당연하게도 가능하다]
alert(adultYears)


//==================================================================================================================================================
// [최종 정리]

// 함수에 대하여 전부 정의해보았다.
// 1. 반환하지 않고, parameter를 사용하지 않고, 외부변수를 사용하는 함수
// 2. 반환되며, parameter를 사용하지 않는 함수
// 3. 반환되며, parameter를 사용하는 함수
//      ==>> 1번보단 2번이, 2번보다는 3번이 더 [동적] 이라고 할 수 있다.

// 우리는 되도록이면, 2번과 3번을 주로 사용하겠지만
// 반드시 반환되는 함수를 사용해야 하는 것도 아니며, 반드시 parameter를 사용해야 하는 것도 아니다.
// 적절한 위치에 적절한 함수의 사용을 하도록 하자.

//==================================================================================================================================================
// [ 객체 안의 함수 method]

let person = {
    name : "max", // property
    greet(){      // method
        alert("hello")
    }
};

// Object(객체) 안에 함수(function)을 넣을 수 있다.
// 객체 안의 함수는 [method] 라고 부른다
// 객체 안의 함수를 넣을 때에는 function 이라던가, let 이라던가 하는 코드를 집어넣지 않고
//          단순하게 [    함수이름() { 함수 코드 }   ]로 적는다.

// Method의 실행!
// person.greet()

person.greet();

//==================================================================================================================================================
// [ alert 대신에 console에만 표시되는  값을 만들기 ==> console.log()]

alert(job.place);
console.log(job.place);

// *console.log() 는 내장된 method로, console에 log로만 보이게 되고 화면에는 표시가 되지 않는다.

