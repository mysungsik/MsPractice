[1. 함수 파라미터에 기본값 추가하기]  
    function(userName = "user"){
        console.log(userName)}

    * [기본값이 있는 매개변수]는 [다른 모든 매개 변수 다음에 추가]하는 것이 중요합니다.

[2. 나머지연산자(rest parmeter)[...] 동적으로 파라미터를 추가할 수 있는 함수 만들기]
    function sumUp(...number){
        result = 0;
        for(const num of number){
            result =+ num
        }
        return result;
    }
    
    * [나머지연산자]는 [다른 모든 매개 변수 다음에 추가]하는 것이 중요합니다.

[3. 스프레드 연산자(spread parmeter)[...]를 통해 [배열으로 된 변수를, 하나하나씩의 값으로 만들기]]
    => 스프레드 연산자 : [값 만을 가져온다.]
        왜 그런일이 필요할까? : array, object는 변수에 저장할때 [주소]로 저장하기 때문에, 
            사실 배열이나 객체를 담은 변수를 불러오면 [값이 아닌 주소를 가져오는 것이다.]

[4. 함수도 [객체]이다.]
    function ms(){
        console.log("hi")
    }
    ms.id = "ms"
    console(ms.id)
    => 결국 [객체]이므로, [객체처럼 (.)을 써서 사용할수도, 키와 값을 추가할수도 있다.]

[5. "템플릿 리터럴" 을 사용한 [변수를 포함한 동적인 코드]]

[6. 기본값과 참조값]
    원시값 : 기본값으로서, 크기가 작은 boolean, number, string 등...
    참조값 : 큰 값들로, object, Array 등이 있다.
    * 참조값은 [주소로 저장된다.] 참조값의 변수는 [포인터일 뿐이다.]

    
[7. try catch 를 통해 [함수의 오류를 처리하고, 끊기지 않는 함수 만들기]]
    ==> express 의 경우, 오류를, status 로 알리고, 다른것을 render하여, 처리 할 수도 있다. [미들웨어를 통해]
    ==>> 하지만 그런 일 조차, [함수가 실행중 오류로 인해, 종료되고 넘어가는 것이다.]
    ==>>> [오류가 나더라도, 함수가 중지되지 않고, 끝가지 실행되어야 하는 함수를 만들때] [try,catch 를 사용한다.]

    사용 : [오류가 날 것으로 예상되는 곳에 사용]