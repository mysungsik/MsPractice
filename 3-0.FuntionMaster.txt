[1. 함수]
    1) 시작 : 자바스크립트 코드를 읽기 시작하고 나면, 가장 먼저 읽힌다.

    2) parameter(매개변수) 와 Argument(인수)
        : [매개변수]는 함수를 정의할때 괄호안에 넣어 지정하는 변수
        : [인수]는 실제로 값을 호출할때, 함수에 전달햐는 구체적인 값

        function ms( parameter ){
            console.log(parameter)
        }
        ms("max")
                 "max" : Argument
                parameter: Parameter

[2. 메서드]
    : 객체 안에 들어있는 함수

    const person = {
        greet : function greet(){
            console.log("hi there")
        },
        name : "ms",
        age : 30
    }
    person.greet()
    person.name;
    // person 이라는 객체 안에, function 이 들어있다. ==> greet() 은 메서드다
    
    //다시말해
    // startBtn.addEventListener("click",startGame)
    // 에서 addEventListener는 startBtn이라는 개체 안에 메서드다

[3. 함수는 객체다!]
    
[4. 함수를 선언 VS 함수 표현식]
    가장 큰 차이점 : [표현식은] 반드시 [정의 한 이후에] [사용]해야한다.
                    [선언]은 아무때나 function을 선언 하더라도 관계가 전혀 없다.
    
        [표현식]은 [호이스팅]을 하더라도 값이 없는 상태로 호이스팅하므로, 사용불가
        
        [표현식에서 function의 이름을 [쓰지않는 함수]를 [익명함수]라 부른다.]

[5. 화살표함수의 사용]
    : 간단한 함수에는 화살표 함수를 사용할 수 있따.
    : 조건은 [반드시 변수 안에 저장해야한다. == 표현식 함수를 사용해야한다]

    ex) const msms = (a,b) => { a + b}
        const msms2 = function(a,b){
            return a + b
        }
        const msms3 = a => {a*a}
        // 파라미터가 하나일경우

        const msms4 = () => console.log("hi")
        // 파라미터가 없을 경우

[6. function에서 REST 연산자[...] 를 이용한 유연한 파라미터의 함수 만들기]
        *배열에서 사용하는 전개연산자(스프레드연산자)[...] 와 헷갈리지 말자
        * 전개연산자는 [참조함수인 배열에서, 주소로 저장되는 것을 대신해 값을 그대로 가져올때 쓰는 것이다.]
            
// 무한한 파라미터를 가진 함수를 가정하자, 그리고 그 파라미터를 전부 더하는 함수를 만들어본다.
// 중요한것은 [파라미터에 대하여 유연함을 가져야한다.]

- 방법1 : 파라미터를 [배열]로 잡아서 전부 다 더하게 만들기

const sumUp = (number) => {
    let sum = 0;
    for(let num of number){
        sum = sum + num
    }
    return sum
}
console.log(sumUp([1,3,67,2,65,-10]))

- 방법2 : REST 연산자를 이용한 방법[...] ***

//       : 전개연산자(스프레드 연산자)와 사용법은 같지만 동작이 다르다

const sumUp2 = (...number) => {
    let sum = 0;
    for(let num of number){
        sum = sum + num
    }
    return sum
}
console.log(sumUp2(1,3,67,2,65,-10))

[7. 함수 안의 함수]
 : 가장 바깥에 있는 함수는 [전역으로 사용 가능]하지만
    [내부에 있는 함수는] 그 함수 안에서만 사용 가능하다.

[8. 콜백 함수]
    : 무언가에 의해, 어느시점에 실행되는 함수
    : 프로그래머가 제어하는 것이 아니라, 사용자가 어느순간 클릭하여 실행하면 그때, 실행되는 함수를 말한다.
    : addEventListener() 안에 넣어진 함수가 그렇다.
    : addEventListener() 안에있는 파라미터에 함수가 들어가 있는경우, 콜백함수가 된다.

    * 간단히 함수 안에 함수가 들어가있으면, 콜백함수가 된다.
[9. bind()]

[10. call()과 apply()]