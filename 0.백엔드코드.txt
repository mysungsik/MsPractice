[1. http 패키지 불러오기]  
const http = require(http)      // 물론 변수이름은 마음대로 

        HTTP PAKEAGE 둘러보기 ==>> https://nodejs.org/dist/latest-v18.x/docs/api/http.html
        [노드JS에서 제공하는] 유틸리티 [메서드와 프로퍼티]로 가득찬 [객체]가 반환된다.

[2. sever 만들기]
const sever = http.createServer()

[3. sever에 수신대기 포트 만들기]
server.listen(3000)         // 3000은 마음대로 입력한 [포트번호]이다.
                            // [여기까지 입력하면, 포트3000에 대한 요청을 수집하라 라는 코드이다.]

[4. 요청과, 응답 함수를 만들어서 서버에 집어넣기]

    - 앞선 2번의 서버만드는 코드에 추가

    const http = require(http) 

    function handleRequest(request, response){
        response.statusCode = 200;
        response.end("HTML태그 입력")
    }
    const sever = http.createServer( handleRequest )

    server.listen(3000)

    - createServer() 의 첫번째 파라미터로 [requestListener] 를 요구하므로, 집어넣는 것이다.
    - 또한, 만들어진 서버[포트번호 3000]에 요청이 들어올때마다, handleRequest 함수가 실행될것이다.

    [statusCode] 는 브라우저에게 [요청이 성공했는지에 대한 여부를 알리는 방법이다.]
    https://developer.mozilla.org/ko/docs/Web/HTTP/Status
    [200] 은 OK 를 나타내는 코드이다.

[5. statusCode, end()]

    1) statusCode
        : [브라우저]에게 [요청의 성공여부를 알려주는 코드]
    2) end()
        : 요청에 성공했다면, [응답준비를 마치고, 응답에 대한 것을 보낼 수 있다.]
        : [기본적으로 HTML태그를 보내보자.]


[6. request 와 response]        ****************************************************************

    1) request : [브라우저에서 서버로 보내는 요청들 중 하나]
                대표적으로 [request.url] 으로 포트 뒤의 URL 주소를 받아온다.
    2) response : [ 서버에서 브라우저로 보내는 응답 ]
                대표적으로 response.statusCode = ""
                          response.end()

[7. new Date().toISOString()]

    new Date() ==> 날짜 객체를 생성
    toISOString() ==> 문자열로 변환 함수

[8. [node.JS] 그리고 [타사패키지 Express.js]]

    nodeJS  : javaScript 의 언어를 사용하는 [브라우저 외부에 있는 javaScript], [서버에 적합한 프로그래밍 언어이다]
    nodeJS의 한계   : 많은 양의 코드를 적어야하고, 복잡하게 사용해야하는 기능들이 많다. [그래서 타사패키지를 사용할것이다.]
    타사패키지 설치 : npm init, npm install 패키지이름      을 통해 설치한다.
    Express.js 의 장점  : 짧고 간결한 코드, 다양하고 편리한 기능
    Express.js 의 사용 

[9. node express의 사용]
[ 파일을 주는 get, 파일을 받는 post ]
[ 파일을 주는 res, 파일을 받는 req ]
************************* [   get("", function(req,res){})   ] , [   post("", function(req,res){})  ]   ] **************************************

    1) get("", function(req,res){})
        :nodeJS 의 request와 response 를 합친 형태 중, *** [보내는 형태] ***

        get("/jsjs",  function(req, res){
            res.send("<h1> hi </h1>")
        })

        ==>> localhost:3000/jsjs 에 접근했다면, [응답하라(res)] = "<h1> hi </h1>" 을 적음으로써!



    2) post("", function(req,res){})
        :nodeJS 의 request와 response 를 합친 형태 중, *** [받는 형태] ***

        post("/msms", function(req,res){
            const userName = req.body.username;
            res.send("<h1> hi </h1>")
        })

        ==>> localhost:3000/msms 에 접근했다면, 

            req.body.username  ==>> [받아라(req)], [username] 이라는 [HTML의 name]을 [가진 요소의 데이터]를

            [응답하라(res)], "<h1> hi </h1>" 라고 나타냄으로써!

    - 파일을 줄것이면 애초에 [get] 으로 접근하고.
    - 파일을 받을 것이면 애초에 [post] 로 접근한다.
    - [POST] 로 접근한 이유는 <form aciton="url 뒤의 주소" method = "POST"> 로 method를 post로 설정했기 때문이다.


    - 장점 = 간단하다, 사용방도가 많다, 
    -       statusCode 가 기본으로 200 으로 되어있어서 쓸 필요가 없다.

[10. 받아온 데이터를 다시 자바스크립트 코드로 변환하기] [use 를 사용하여!] + [미들웨어 함수]
    : 폼 양식을 통해, [브라우저에서 서버로] [데이터를 보냈다.]
        [그럼에도 불구하고, 데이터는 [자바스크립트코드가 아닌] [그저 데이터의 일부일뿐]]
        [ 그러므로, 자바스크립트에서 읽을 수 있도록 구문 분석을 해야한다.]

    const express = require("express")
    let app = express()

    app.use(express.urlencoded({extended : false}))
    ==>> [미들웨어 함수로], [서버에서 데이터를 받기 전, 자바스크립트코드로 구문분석해준다]


[11. 파일에 접근하기 위한, 내장패키키지와 사용]

        **[ 전체적 개요 ]
            - 0. [json]파일을 만들어서, 배열 하나를 만들어둘것.   ==> 단순히 [] 만 적어주면 됌.

            - 1. 파일의 데이터를 가져옴 [req.body.name태그 이름]
                    * 원시 텍스트 데이터    ==> 데이터를 가져올때는 항상 [원시 텍스트 데이터]로 가져온다.

                [ const userName = req.body.username;    ]

            - 1-1. const app = express()
            -      app.use(express.urlencoded({extended : false})) 를 통해 [가져온 텍스트데이터]를 [자바스크립트 코드 데이터] 로 자동 변경하게만듬

            - 2. fs(파일시스템)패키지 , path(경로) 패키지를 불러옴

                [const fs = require("fs")]   [const path = require("path")]
                    * 내장 패키지  [ fs ],  [ path ] 를 불러올것
                    * [fs]는 파일을 [읽고], [쓰고],  [저장] 하는데 사용
                    * [path]는 [파일의 경로를 추적]하는데 사용

            - 3. 가져온 데이터를 저장하고자 하는 파일의 [경로를 저장]

                [ const filePath =  path.join(__dirname , "data", "user.json")         ]   ==> 파일의 정확한 위치정보를 잡음
                        * __dirname : 디렉토리 이름 명령어
                        * "data", "user.json"       ==>> 하나씩 파고들어서 파일에 접근  [ex) 1, 2, 3, ms.json]  : 1번폴더 안의 2번폴더 안의 3번폴더 안의 ms.json파일

            - 4. 파일의 경로에 있는 내용을 [읽음]
                    * 원시 텍스트 데이터 ==> json 안에 있는것을 읽은것이니까
                [ const fileData = fs.readFileSync(filePath)              ]       ==> [filePath 경로의 파일을 읽고], [fileData 변수에 저장]

            - 4-1. [읽어온 텍스트 데이터를 [자바스크립트 데이터로 분석] ]

                [ const existingUsers = JSON.parse(fileData)    ]
                        * JSON.parse()  :  텍스트를 자바스크립트코드로
                        * JSON.stringify() : 자바스크립트코드를 텍스트로
                
            - 5. [ [자바스크립트 데이터]로 분석된 데이터 안에 [1번에서 받아온 데이터를 추가(push)]  ]
                [ existingUsers.push(userName)        ] 
                    * [push 등의 코드를 조작하는 자바스크립트 코드]는
                            [자바스크립트 데이터만] [조작이 가능하다]
                    * 받아온 데이터는 [원시 텍스트 데이터]지만, [app.use] 를 통해 [받아온 데이터는 전부 자바스크립트 데이터로] 저장되기에, 쓸 수 있는것. 

            - 6. [받아온 데이터를  [실제 존재는 파일에 쓰고 저장]  ]
                [ fs.wirteFileSync(filePath, JSON.stringify(existingUsers))          ]       ==> 파일을 쓰고 저장
                        *Sync 라는 코드는 [즉시] 라는 뜻이다.
                        * [filePath] 라는 경로에(user.json 파일), [JSON.stringify(existingUsers)] 라고 쓰겠다. [파일로서 저장]

        ** [ 헷갈릴 수 있는 것  ]
            0. 텍스트 데이터와, 자바스크립트 데이터를 헷갈리지 말자
            1. [받아오는 데이터]는 [텍스트 데이터], 
                [사용 가능한 데이터]는  [자바스크립트 데이터]이다.
            2. [데이터를 받아온다 한들], [그걸을 자바스크립트 배열에 추가한다 한들]
                [정작 [파일]로 저장되지는 않는다.]

                *** 파일을 열어, 데이터를 배열에 집어넣고, 집어넣어진 배열을 파일에 쓰고 저장하여야, 파일에 저장됨을 헷갈리지 말자.
                        

        **[ 기초적 지식 ]
            0. [json 파일]은 [원시 텍스트만 읽을 수 있다.]  [ 자바스크립트 코드는 읽을 수 없다.]
            1. [데이터를 뽑아올 때는, [원시 텍스트로 가져와진다.]]
            2. [ [원시 텍스트 데이터]는 코드로 작업 할 수 없다!]
            2-1. [ [자바스크립트 코드 데이터]는 코드로 작업 할 수 있다!]
                * 코드작업을 하려면 [텍스트데이터를] [자바스크립트 코드 데이터로] 변경해주는 JSON.parse() 가 필요하다.