- MySQL DATABASE SoftWare

[1. 시작 ]

    0. 소개 
        [SQL database 프로그램]은 [로컬]에 [데이터베이스 서버]를 만들어, [그 안에서 데이터를 관리]하게 해주며
        NodeJS 와 상호작용을 해, 데이터를 주고받을 수 있다.

-   [MySQL 을 다운받으면] [서버와 MySQLworkBench] 를 다운받은것이다.
-   [서버는 자동으로 데이터베이스를 생성하고, 가동한다]
-   [MySQLworkBench] 는 그 데이트베이스를 관리하고, 그 안의 데이터를 처리하는 도구이다. [삽입, 삭제, 업데이트 등...]
-   [MySQLworkBench] 에서 [우리는 분류해야하는 데이터베이스 종류 만큼 [데이터베이스 자체를 계속 만들것이다.]]

    [클라이언트는] NodeJS에 의해 [ 웹서버와 통신을 하고, 웹서버는 데이터베이스로부터 데이터를 받는다]
    [클라이언트는 마음대로 웹서버에는 드나들 수 있지만], [데이터베이스 서버는 마음대로 드나들 수 없어야 한다.]

    1. 설치
        1)https://dev.mysql.com/downloads/windows/installer/8.0.html 접속, 수동설치파일 다운로드

        2) 옵션으로  MySQL,  MySQLworkbench 선택 
        3) 비밀번호 지정

    2. [데이터베이스 서버의] 실행과 정지

        1) 윈도우창에, service 검색하여 들어감
        2) MySQL찾아서, 시작, 중지 하면된다.
    
    3. [프로그램] 실행

        1) MySQLworkbench 프로그램을 실행한다.


[2. 용어]

    1. schema(스키마) : 데이터베이스다.


[3. 시작!]

-   0. 절대법칙
        1) 코드의 끝은 ; 로 구별한다.
        2) 예약된 코드는 대문자로 표기한다.
            ((EX) CREATE, DATABASE 등 내장함수 정도 생각되는 것)
        3) 스키마와 테이블의 이름은, [전부 소문자, 띄어쓰기 금지, _ 사용]
        4) 테이블은 복수형으로 쓰는게 대부분 [restaurants]

    1. 새 데이터 베이스 만들기 [ schema 탭에가서, 새 스키마(=DATABASE) 를 만든다.]
        * 이름은 구별이 가기 쉽게 만들어야한다.

    2. 코드 변경하기 (옵션)
        기본 : CREATE SCHEMA `restaurant_finder` ;
        변경 : CREATE DATABASE restaurant_finder ;

        [둘 다 가능하다.]

    3. 새 테이블 만들기 [새로만든 데이터베이스 안에, 테이블을 만들어보자]
        1) 이름
        2) 엔진 정하기
        3) column 더블클릭해서 만들기
        4) column datatype 정하기
        5) 체크박스들
            PK(Primary key) : [한 데이터에 하나의 고유식별키를 등록시킴] : 중복방지
            ID( 자동증가) : [데이터를 추가할때마다, [자동으로 고유의 아이디에 +1을 하여]]
                           [자동으로 새 데이터에 고유 ID를 만들어줌]
            NN(Not Null) : [이것을 선택한 필드는 [항상 값이 있어야함] = HTML required 랑 비슷]
            UQ(Unique) : PK랑 비슷. PK가 체크되어있으면 체크안해도됌

    4. 기본적인 코드
        CREATE TABLE `restaurant_finder`.`restaurants` (
        `id` INT NOT NULL AUTO_INCREMENT,
        `name` VARCHAR(255) NOT NULL,
        `type` VARCHAR(255) NOT NULL,
        PRIMARY KEY (`id`));

        *    `` 는 특수한 문자열이 없으면 생략가능
        *    스키마 . 테이블이름(
            컬럼이름, 타입, 체크박스들
        )

[4. MySQL의 기본적인 사용 CURD!]

    1. [데이터 집어넣기]    - INSERT INTO, VALUES
        1) 쿼리를 실행하기위한 SQL 파일을 새로만듬
        [코드]
            INSERT INTO [테이블이름  or 스키마이름.테이블이름] (넣고싶은 컬럼들) VALUES (값들)
    -   ex) INSERT INTO restaurants (name, type) VALUES ("Korean food","korea")
    

    2. [데이터 가져오기]    -  SELECT (표시할컬럼들) FROM (컬럼이있는테이블이름)
    
        1) 쿼리를 실행하기위한 SQL 파일을 새로만듬
        2) SELECT [컬럼이름들 or *(전부)] FROM [테이블이름]
    -   ex) SELECT * FROM restaurants 


    2-1. [데이터 가져오기 [조건추가]]   SELECT , FROM

        [코드] 
            SELECT [컬럼이름들 or *(전부)] FROM [테이블이름] WHERE [조건]
    -   ex) SELECT * FROM restaurants WHERE type = "USA"

    -   ex2) SELECT * FROM restaurants WHERE type = "USA" AND name > "w"
    -   ex2) SELECT * FROM restaurants WHERE type = "USA" 0R type = "korea"

        2) 특정 컬럼만 가져오려면
    -   ex) SELECT name FROM restaurants WHERE type = "USA"
    -   ex) SELECT id, name FROM restaurants WHERE type = "USA"

        3) 조건을 만족하는 데이터 개수 세기 [COUNT()]
    -   ex) SELCECT COUNT(*) FROM restaurants WHERE type = "korea"


    3. [데이터 업데이트하기 (수정하기)] - UPDATE , SET
        [코드]
            UPDATE [테이블이름] SET [수정될정보] WHERE [조건]
    -   ex) UPDATE restaurants SET name = "kimchiJeon" WHERE id = 1


    4. [데이터 삭제하기]    DELETE FROM
        [코드]
            DELETE FROM [테이블이름] WHERE [조건]
    -  ex) DELETE FROM restaurants WHERE id = 1

   [중요!!!!!]

   UPDATE 및 DELETE 를 사용할때 [반드시 ID로만 작업한다!] 다른건 인식못할수도 있어

[5. 추가적인 기본기능]

Alter Table : 수정
Drop Table  : 삭제
        

        

    
    