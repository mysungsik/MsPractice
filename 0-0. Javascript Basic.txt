[목차]    ===============================================================================================================================

0-2. ~function
    : let 명령어
    : array value
    : object 에 대하여
    : 함수의 정의와 사용 [return, parameter(매개변수) 를 사용한 유동적 function]
    : object 안의 값과 함수 [property 와 mathod]의 사용

1-0. mathmatical
    : 자바스크립트의 계산
    : 자바스크립트의 기본 method와 기본 property 알고 사용해보기

2-0. WHATisDOM
    : DOM이 무엇인가

2-1. DOM basic
    : DOM에 '드릴' 하여 접근하고 수정하는 방법

2-2. DOM basic2 
    [ DOM 으로의 접근과 선택]

    : 개발자도구의 console 창에서 document.body. ... 을 적어가며 vscode보다 편하게 놀아보기
    : DOM에 '드릴'하여 접근하고 수정
    : DOM에 [GetElementById] 를 통해 접근하고 수정
    : DOM에 [querySelecter] 를 통해 접근하고 수정하는 방법
    : 개발자 도구 콘솔창에서, 태그에 선택한 후, (.) 을 추가하여 자바스크립트로 무얼 할 수 있는지 알아보기
    
    : child가 아니라, 부모 요소에 접근하여 보기 (parent), 형제요소에 접근해보기 (previous or next Element slbling)

2-3. DOM Change
    [DOM 의 기본조작] - 생성, 삽입, 제거, 변경

    :접근 하는 방법을 알았으니, 본격적으로 조작해보도록 한다. (기존에 해본 href, textContent 와 같은...)
    : document.createElement 로 생성
    : append("요소") 로 삽입
    : textContent와 href 등으로 꾸미기
    : .remove() 로 제거
    : .append("요소") 를 응용해 요소 이동
    : .innerHTML 으로 [내용 변경하기] 
        *textContent와의 차이점 알기

3-1. Events
    Events의 처리, addEventListener 알아보기

    : 특정 아이디와, 쿼리선택자로,  HTML 코드를 JS에 연결한 후,
     function을 통해, function 을 만들었다.

    : function(파라미터){
        코드
    }   
        1) function 안에 최대한 전역변수를 줄여, 파라미터 안에 event 등을 쓰고,
            let 을 통해, 함수 안에서만 동작하는 변수를 따로 지정하도록 하자
        2) event 등에 해당하는 파라미터는 addEventListener로 연결된 것의
            주인이, 그 파라미터를 대신하게 된다. 

    : addEventListener("동작", "function") 를 통하여, 리스너를 연결했다.
        1) "function" 에는 ()를 적지 않도록 하자. 만약 적을경우 
            HTML은 그 함수를 즉시 해석하여, 사용한다.

    : HTML의 모든 것들은 JS로 옮길 수 있다. INPUT의 maxLength, minLength 같은 것들도 말이다
        ex) text1.minLength;

        요소의 값을 알고싶다면, console.dir(text1); 코드를 적으면 개발자도구에서 알 수 있다.


3-2. simpleText
    간단한 이벤트의 처리 예제. 자동으로 바뀌는 숫자에 관하여

        + 상수(costants)에 관한 상식

4-1. styleChange and 4-1 excise2 folder
        JS로 CSS의 클래스를 변경하여, 스타일을 적용시켜 보았다.  .classList.add()   .className = ""
        JS로 직접적인 코드의 스타일을 변경[INLINE]하여 보았다.  .style.backgroundColor = ""
        *class는 여러개를 동시에 가질 수 있고, .className = "클래스이름1 클래스이름2 클래스이름3" 처럼 여러개를 적으면, 여러개의 클래스를 동시에 가질 수 있음을 알았따.

        파라미터 event를 사용하는 함수에서 event.target은 변수를 대신함을 알고 사용해보았다.
        함수를 사용하여, 클래스를 변경하는 click listener를 만들어보고 변경하여보았다.

5-1. Control Structure [if문 ]
    if 문을 사용하여, 제어구조 변경
        : Comparison operators[ > , ! , ==, ...], Logical operators[ or , and]
        : if (조건){
            코드
        }
        : if 문에 css 코드를 추가하는 js 코드를 사용해, 조건에 맞는 css 코드 작성을 해보았다.
        : 특수한 Boolean 조건을 사용하는 법을 배운다. [true, false 조건이 저장되어 있는 플래그 변수를 사용]

5-2. Control Structure [if문]
    LOOP (반복) 을 해보기 [for 과 while] 
        : for 반복문 [특정 횟수로 반복시키기]
        : for ... of 반복문 [배열(array)의 요소 순환하며 반복시키기]
        : for ... in 반복문 [객체(object)의 요소를 순환시키며 반복시키기] property를 활용해, key 따로 // key // , value 따로: // key[value property] //
        : while 반복문 [특정 회수가 아니라, 조건을 만족할때까지 순환]

5-2. 5-2.Control Structure-Exercise
    if, for, while 을 이용하여, 랜덤다이스 만들기
        : 하나하나 복잡한것을 처리하기
        : 태그 안에 쌓이는 값 innerHTML으로 초기화하기 [  코드.innerHTML = "";  ]
        : Math.random(), math.floor()
        : 숫자가 하나씩 쌓여가는 반복문 만들기

    
[단어] ===============================================================================================================================

array
object
function
parameter
property
method
global variable[전역변수] : 이미 자바스크립트 내에 정의되어있는 변수, 코드 내에서만 사용가능 ex) window 
                                                                                         ex2) console.log(window) 를 적으면 개발자도구에서 전부 볼 수 있다.
global object[전역객체]
DOM



===============================================================================================================================






[자바스크립트]는
    : 웹페이지와 유저간의 상호작용을 라이브로 적용시켜주는 언어
    : 브라우저와 유저가 직접적인 상호작용을 함 [페이지가 자동으로 업데이트]


[매우매우 많은 응용사례]

1. html 페이지없이 백그라운드의 내용을 불러올 수 있음
2. 자체검증기능
3. 페이지관리기능 등...


[0. How to user Javascript Code]

    1) <script> </script> 안에 코드를 작성하여 사용한다.
    2) <head> </head>   섹션에 넣어 사용해도 관계 없고 보통 여기에 쓰는 것을 추천한다.
    3) 코드는 [""] 안에 쓰거나 [''] 안에 써도 관계 없지만 혼용하여 사용하지 않도록 한다.
    4) "" 안에 한번더 "" 를 쓰고 싶거나, '' 안에 '' 를 한번 더 쓰고싶다면
        이것은 코드의 시작과 끝이 아닌 큰따옴표와, 작은따옴표 임을 확실하게 하기위해
            \를 앞에 붙이도록한다
        ex) "나는 명식이야 \"잘부탁해\" "
        ex) '나는 명식이야 i\'m 명식'

    5) <진정한 코드의 사용> 은 <function> 을 이용하여 사용한다.
        값을 그저 나열한다고 해서 작동하지는 않는다. 그것을 동작하게 하는 <함수> 안에 넣어 사용해야한다.

    <script> 
        alert( "나는 명식이야 \"잘부탁해\" ")
    </script>

[1. value]
    1) Text (String)
    2) number
    3) Boolean
    4) Object ,arrays etc....

[2. variable]
    : value 를 담아놓은 container

    [사용]

    *항상 카멜표기법을 사용하도록 하자
    *변수명은 대부분의 특수문자(-, : , @ 등등) 을 사용 할 수 없다.
    * _(underline)은 괜찮으니 사용하자
    
    let variableName
    variableName = "밸류1"
    or
    let variableName = "밸류1"

    [중요사항]

    * 코드는 위에서 아래로 쭉쭉 읽히기 때문에
    let variableName = "밸류1"
    alert(variableName)
    variableName = "밸류2"
    alert(variableName)
    라는 코드를 실행할 경우, 밸류1이 한번 뜨고, 밸류 2가 한번 뜬다.

[3. 코드가 끝났다는 표시로 세미콜론(;) 을 습관적으로 입력하기]
    : 자바스크립트는 한줄에 많은 양의 코드를 표시 할 때가 있다.
    : 그럴때는 항상 코드가 끝나면 (;) 을 사용한 후, 다음 코드를 적어야 하기에, 습관적으로 입력하도록 하자 
    : 줄을 바꿨을 때에는 필수가 아니지만 입력하면 좋다.
    : 할거면 계속 쓰고, 쓰지 않을거면 계속 쓰자. 

[4. 자바스크립트코드를 한 파일에 저장해서 연결하기]
    : HTML 파일에는 이미 많은 양의 HTML CODE 가 있을 것이다.
    : 수많은 HTML 코드 속에 다시, 수많은 자바스크립트코드를 입력하는 것은, 코드 관리에 매우 불리하다
    : 자바스크립트코드를 한 파일에 안에 몰아넣고, 연결해보도록 하자. 마치 CSS처럼

    1) 파일이름.js 로 파일 생성
    2) .js 파일 안에는 [CSS 처럼, 당연하게도 <script></script> 라는 태그 안에 넣지 않고] [코드만 넣는다]
    3) HTML 파일을 js 에 연결한다.
    <head>
         <script src="/0-2.Simple Practice.js"></script>
    </head>    
        헤드섹션 안에, [script src = "자바스크립코드.js" ] 를 통해 연결한다.
