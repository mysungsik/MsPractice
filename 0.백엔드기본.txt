==============================================================================================================================================
[                     KNOWLEDGE               ]


[0. 프론트엔드는 에서 [실시간으로 정보를 받아 처리되는] [ 동적인 웹사이트를 만들고 싶다면]]
    [백엔드] 를 활용해야한다.
    * 소위 [백엔드]는 [서버에서 직접 실행되는 것]
    [사용하는 컴퓨터에서 직접 동적으로 각각 다른 코드를 실행하게한다]

    *[백엔드의 역할]
    1. 사용자에게 받아온 정보를 수집, 제공하는 [중앙서버]
        ex) 내 프로필사진은 서버에 저장되어 들어오는 모두에게 배포되어 보여야하는것.


[1. [브라우저는] url을 통해 [사이트의 컴퓨터[서버컴퓨터]에 요청]]

[2. [서버컴퓨터]안에는 HTML,CSS,JS 등의 코드가 저장되어있고,]
    [브라우저]로 답신을 보냄

[3. [브라우저]에서 [웹사이트가 보임]]

*여기서 말하는 [브라우저]는 [클라이언트 혹은 프론트엔드], [서버컴퓨터]는 [백엔드] 라고 한다.
    또한, [백엔드]에서 [클라이언트]에게 답신을 보내기 전,[데이터를 저장]하고, 
    답신을 보낼 때, [각 유저마다 다른 종류의 답신]을 보내는 [로직을 저장]하기도 한다.

    [백엔드의 로직으로 각 유저마다 다른 종류의 답신을 보내는 사이트를] [동적웹사이트]   // 프론트엔드 + 백엔드 = 풀스텍
        EX) 아마존, 네이버, 쿠팡 등...

    [보는 이들이 전부 같은 웹사이트를 보는 사이트를] [정적 웹사이트] 라고 한다.     // 프론트엔드
        EX) 대부분의 인터넷 페이지, 포트폴리오용 페이지 등...



[5. 기본적인 URL에는 포트번호가 숨겨져있다.]
    
    :  아마존같은경우 amazon.com :80 
                    amazon.com : 443    등이 쓰인다.


[6. JSON 파일의 중요성]
    : "JavaScript Object Notation"의 약어이며 텍스트 데이터를 머신과 사람이 읽을 수 있는 형식으로 형식화하는 표준화된 방법입니다.
    : JSON 파일은 [사실 단순한 텍스트파일에 불과하다.]
    : JSON 파일의 데이터를 읽는것이 [다른 파일을 읽는 것보다 컴퓨터에게 매우 쉬운일이라]
        [데이터의 저장은 JSON 파일로 한다.]

[7. 코드의 순서]

    1. 내장 패키지 [ fs, http 등]...
    2. 타사 패키지 [ express 등...]
    을 사용하는게 관례이지만, 사실 순서는 크게 중요하지않다.

[8. 내장 패키지]

    1. http  ==> http 요청에 필요한 모든 객체들이 들어있다.
    2. fs ==>  [file system] 에 접근하는 모든 객체들이 들어있다.
                : 데이터에 저장하고 불러오고...
    3. path  ==> 간단한 방법으로, 모든 운영체제에서 작동하는 [완전한 경로]를 [쉽게 구성할 수 있는 패키지]

[9. 라우트]
    : 특정 HTTP 메소드(GET, POST)및 경로를 찾아 일부 로직을 실행하는 핸들러
    : app.get()
    : app.post()
     가 속한다.

[10. 미들웨어]
    : 모든 들어오는 요청에 대해 실행시키는, 요청 처리기

[11. 템플릿과 템플릿의 사용 이유]

    - 템플릿 엔진의 사용이유
    : 서버에 HTML 파일을 [동적으로 사용하기 위해]
    :    [특별한 EJS 구문을 사용함으로써!]
    - 템플릿엔진 ejs의 사용
    - npm install ejs
    - app.set() 의 사용 [ express의 세팅창 ]
    * app.set("views", path.join(__dirname, "views"))
        ==> [처리하는 탬플릿파일이 있는 위치는 "views"폴더이다.]
    * app.set("view engine", "ejs")
        ==> [탬플릿을 읽는 엔진을 사용할건데] 이름은 [EJS] 엔진이다.
    - HTML파일의 확장자를 전부 .ejs 로 변경

    - res.render() 의 사용
    * 특징 : [이미 set() 에서 views 폴더를 지정했기에,]
            [,  또한 render 라는 코드가 ejs 파일을 찾아 사용할것이기 때문에]
            ==>> 1. 확장자를 따로 적지 않고, 파일이름만 적는다
                2. 경로를 따로 지정하지 않고 그저 파일이름만 적는다.
                
    * 기존 :    app.get("/asd",function(){
                const filePath = path.join(__dirname,"views","index.html")
                res.send(filePath)
                })
    * 사용후 :  app.get("/asd",function(){
                res.render("index")
                })

[12. npm]



==============================================================================================================================================
[                   ACTION                      ]

[0. 기본적인 실행방법]
    
[명령프롬프트 창]에  [node 파일명.js]   *파일의 위치를 잘 파악하고 하자.



[1. 타사 패키지를 추가하여, 데이터를 받아오기]

1. npm 커맨드 [node pakage manager]
    : [nodeJS 내장된 도구로서] [타사패키지를 받을수 있는 도구이다] 
    1) npm init : [npm 설치]
        * 이것저것 나오는것 다 enter로 넘기거나, 적고싶은것은 적고, 나중에  json파일에서 수정할 수 있다.
        * author에 이름; 라이센스에 [MIT] 라고 적어주자.
        * npmjs 페이지에서 볼 수있다. https://www.npmjs.com/package/express

    2) npm install express

    3) [node_modules]에 모든 패키지가 저장되는데
        혹시라도 폴더를 지웠다면, [ npm install ] 명령어를 통해 다시 깔수 있으니, 걱정할 것 없다.

[2. HTML, CSS, javaScript, nodejs 연결!]
    HTML 파일
        : [get, post] 안의 [함수에서], [res.sendFile(   HTML 파일이름이 담긴 PATH  )] 로 연결
    CSS, JavaScript 파일
        :   [정적 파일]로서, [폴더를 하나 만들어, 집어넣고]  

        :   [HTML 파일 안에서는 link 와 script로 연결하고 (웬만하면, [상대경로]로 연결)]
                                * 상대경로 = [ / ] 가 없는  [style/ms.css]의 형태,   [ /style.ms.css] 가 아니라

        :   [ExpressJS 안에서는, 미들웨어함수로 위치를 받아 연결]

                *app.use(express.static("정적파일있는 폴더이름"))




==============================================================================================================================================\
[                   ETC                     ]



[1. [ctrl + C] 는 실행중인 코드 중지 명령어]

[2. 수동으로 서버를 열고닫지 않고, 자동으로 변하는 패키지 추가하기 [nodemon] ,사용하기]

    1) 설치 : npm install nodemon --save-dev
             * --save-dev ==> 개발중이라는 뜻

    2) 사용준비 :  [package.json] 에서 "scripts" 찾기
                "scripts" 의 내용에
                "사용하고싶은명령어" : "nodemon 파일명"
                ex) "start" : "nodemon 1.app.js"

            - 노드몬은 [설치한, 그 폴더에서만 사용가능하다]
            - 노드몬은 [직접실행 대신에, 노드몬을 통하여, 간접적으로 실행시켜주는 패키지다]
            - package.json 의 scripts 는 [일종의 자동커맨드이다], [예약된 실행줄을] [실행명령어를 사용하면 자동으로 쭉 입력되어 사용되게한다.]

    3) 사용 : npm 사용하고싶은명령어
            ex) npm start

